name: Pard CI / CD

on:
  push:
    branches:
      - main

env:
  REGISTRY_NAME: ghcr.io
  GITHUB_USER_NAME: ${{ secrets.USER_NAME }}
  DOCKER_FILE_PATH: ./Dockerfile
  DOCKER_COMPOSE: docker-compose.yml
  IMAGE_NAME: ghcr.io/${{ github.repository }}/main
  PROJECT_NAME: pard

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set Gradle Permission
        run: chmod +x ./gradlew

      - name: Gradle Build
        run: ./gradlew clean bootJar -x test

      - name: Set up Docker Buildx for Caching
        uses: docker/setup-buildx-action@v3

      #################### GITHUB CONTAINER REGISTRY LOGIN ########################

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ env.GITHUB_USER_NAME }}
          password: ${{ secrets.ACCOUNT_TOKEN }}

      #################### DOCKER BUILD AND PUSH ###############################

      - name: Build Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKER_FILE_PATH }}
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

    ######################## DEPLOY ################################

  deploy:
    name: Pard Deploy
    needs: build
    runs-on: self-hosted

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_NAME }}
          username: ${{ env.GITHUB_USER_NAME }}
          password: ${{ secrets.ACCOUNT_TOKEN }}

      - name: Docker Run Run
        run: |
          docker-compose -f ${{ env.DOCKER_COMPOSE }} pull 
          docker-compose -f ${{ env.DOCKER_COMPOSE }} --project-name=${{ env.PROJECT_NAME }} up -d
          docker image prune -f
          docker network prune -f